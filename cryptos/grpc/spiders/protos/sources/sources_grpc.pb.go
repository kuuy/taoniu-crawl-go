// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: spiders/protos/sources/sources.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourcesClient is the client API for Sources service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourcesClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	GetBySlug(ctx context.Context, in *GetBySlugRequest, opts ...grpc.CallOption) (*GetBySlugReply, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error)
}

type sourcesClient struct {
	cc grpc.ClientConnInterface
}

func NewSourcesClient(cc grpc.ClientConnInterface) SourcesClient {
	return &sourcesClient{cc}
}

func (c *sourcesClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/taoniu.local.crawls.spiders.grpc.services.Sources/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesClient) GetBySlug(ctx context.Context, in *GetBySlugRequest, opts ...grpc.CallOption) (*GetBySlugReply, error) {
	out := new(GetBySlugReply)
	err := c.cc.Invoke(ctx, "/taoniu.local.crawls.spiders.grpc.services.Sources/GetBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourcesClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error) {
	out := new(SaveReply)
	err := c.cc.Invoke(ctx, "/taoniu.local.crawls.spiders.grpc.services.Sources/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourcesServer is the server API for Sources service.
// All implementations must embed UnimplementedSourcesServer
// for forward compatibility
type SourcesServer interface {
	Get(context.Context, *GetRequest) (*GetReply, error)
	GetBySlug(context.Context, *GetBySlugRequest) (*GetBySlugReply, error)
	Save(context.Context, *SaveRequest) (*SaveReply, error)
	mustEmbedUnimplementedSourcesServer()
}

// UnimplementedSourcesServer must be embedded to have forward compatible implementations.
type UnimplementedSourcesServer struct {
}

func (UnimplementedSourcesServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSourcesServer) GetBySlug(context.Context, *GetBySlugRequest) (*GetBySlugReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBySlug not implemented")
}
func (UnimplementedSourcesServer) Save(context.Context, *SaveRequest) (*SaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSourcesServer) mustEmbedUnimplementedSourcesServer() {}

// UnsafeSourcesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourcesServer will
// result in compilation errors.
type UnsafeSourcesServer interface {
	mustEmbedUnimplementedSourcesServer()
}

func RegisterSourcesServer(s grpc.ServiceRegistrar, srv SourcesServer) {
	s.RegisterService(&Sources_ServiceDesc, srv)
}

func _Sources_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taoniu.local.crawls.spiders.grpc.services.Sources/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sources_GetBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServer).GetBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taoniu.local.crawls.spiders.grpc.services.Sources/GetBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServer).GetBySlug(ctx, req.(*GetBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sources_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourcesServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taoniu.local.crawls.spiders.grpc.services.Sources/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourcesServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sources_ServiceDesc is the grpc.ServiceDesc for Sources service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sources_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "taoniu.local.crawls.spiders.grpc.services.Sources",
	HandlerType: (*SourcesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Sources_Get_Handler,
		},
		{
			MethodName: "GetBySlug",
			Handler:    _Sources_GetBySlug_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Sources_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spiders/protos/sources/sources.proto",
}
